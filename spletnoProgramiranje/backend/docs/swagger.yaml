basePath: /v1
definitions:
  data.DepartureGroup:
    properties:
      direction:
        type: string
      line:
        type: string
      times:
        items:
          type: string
        type: array
    type: object
  data.Line:
    properties:
      id:
        type: integer
      line_code:
        type: string
      name:
        type: string
    type: object
  data.Location:
    properties:
      latitude:
        type: number
      longitude:
        type: number
      radius:
        type: integer
    type: object
  data.LoginUserPayload:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  data.PathLocation:
    properties:
      destination_latitude:
        type: number
      destination_longitude:
        type: number
      location_latitude:
        type: number
      location_longitude:
        type: number
    type: object
  data.RegisterUserPayload:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  data.Route:
    properties:
      id:
        type: integer
      name:
        type: string
      path:
        items:
          items:
            type: number
          type: array
        type: array
    type: object
  data.Stop:
    properties:
      id:
        type: integer
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      number:
        type: string
    type: object
  data.StopMetadata:
    properties:
      departures:
        items:
          $ref: '#/definitions/data.DepartureGroup'
        type: array
      id:
        type: integer
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      number:
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      error:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for our bus simulation app
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: M-Busi API
paths:
  /authentication/login:
    post:
      consumes:
      - application/json
      description: Login with email and password to get JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/data.LoginUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Login user
      tags:
      - authentication
  /authentication/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username, email and password
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/data.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Register a new user
      tags:
      - authentication
  /health:
    get:
      consumes:
      - application/json
      description: Get the health status of the API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Health check endpoint
      tags:
      - health
  /routes/{lineId}:
    get:
      consumes:
      - application/json
      description: Get the route path for a specific bus line
      parameters:
      - description: Line ID
        in: path
        name: lineId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.Route'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get route of line
      tags:
      - routes
  /routes/active:
    get:
      consumes:
      - application/json
      description: Get all currently active bus routes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get active routes
      tags:
      - routes
  /routes/list:
    get:
      consumes:
      - application/json
      description: Get all bus routes to display coverage on map
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/data.Route'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get routes list
      tags:
      - routes
  /routes/simulate/{lineId}:
    get:
      consumes:
      - application/json
      description: Get realtime bus locations through websocket connection
      parameters:
      - description: Line ID
        in: path
        name: lineId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "101":
          description: Switching to WebSocket protocol
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get realtime line location
      tags:
      - routes
  /routes/stations/{lineId}:
    get:
      consumes:
      - application/json
      description: Get all stops that appear on a specific route
      parameters:
      - description: Line ID
        in: path
        name: lineId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/data.Stop'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get stations on route
      tags:
      - routes
  /show/shortest:
    post:
      consumes:
      - application/json
      description: Find the most optimal path to desired location
      parameters:
      - description: Source and destination locations
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/data.PathLocation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/data.Line'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get shortest path
      tags:
      - path
  /stations/{stationId}:
    get:
      consumes:
      - application/json
      description: Get detailed station data including departure times and bus lines
      parameters:
      - description: Station ID
        in: path
        name: stationId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.StopMetadata'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get station metadata
      tags:
      - stations
  /stations/closeBy:
    post:
      consumes:
      - application/json
      description: Get all stations within a specified radius from given location
      parameters:
      - description: Location data
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/data.Location'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/data.Stop'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get stations nearby
      tags:
      - stations
  /stations/list:
    get:
      consumes:
      - application/json
      description: Get a list of all bus stations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/data.Stop'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get list of stations
      tags:
      - stations
  /stations/location/{stationId}:
    get:
      consumes:
      - application/json
      description: Get geolocation data of a specific station
      parameters:
      - description: Station ID
        in: path
        name: stationId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.Stop'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get station location
      tags:
      - stations
swagger: "2.0"
