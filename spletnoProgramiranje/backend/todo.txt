handler za postaje:
- pridobi seznam vseh postaj za buttone (ime, številka, id)  "/stations/list" ✅
- pridobi podatke o lokaciji postaje (latitude, longitude) "/stations/location/stationId" ✅
- pridobi podatke za specifično postajo (ime, številka, linije, odhodni časi) "/stations/stationId" ✅
- get postaje within specific location "/stations/closeBy/location" (to z implementacijo geoprostorskih poizvedbe) ✅


handler za linije:
- pridobi pot specifične linije glede na id linije "/routes/lineId" ✅
- pridobi pot linije in vse postaje, ki so na poti tote linije "/routes/stations/lineId" ✅
- pridobi vse linije (id, koda linije) "/routes/list" ✅
- simulacija avtobusov na trenutni poti "/routes/simulate/lineId" (to z implementacijo web sockets)


handler za uporabnike:
- ustvari uporabnika
- pridobi uporabnika po id-ju
- avtentikacija in avtorizacija (to z implementacijo JWT)



če de čas, spremeni departures table tak, ka de seznam departerov, ne pa vsak departure posebej
naredi, ka vzemes lokacijo, ti poisce nejbljizjo postajo, ki te vodi do tja, kam ces iti
simulacija avtobusov na trenutni poti "/routes/simulate/lineId" (to z implementacijo web sockets)



naredi, ka ti posle mail invite za registracijo, ko bo čas


danes za narediti:
- dodatna dokumentacija s swagger (to nejbol vecer, spodnji dve funkciji sta ti pomembnejši)

- narediti za nejhitrejsa pot do cilja od trenutne lokacije
    - nejprej pridobis 3 nejbljizje postaje zeljene lokacije
    - poglednes, keri directioni vozijo do teh postaj (vzemi direction)
    - poglednes, kere 3 postaje s totimi routi so nejbljizje uporabnikovi lokaciji
    - preveris case odhoda za tote specificne route na totih postajah
    - te pa vse matche izpises
    - lehko te potli tudi naredis na frontend, ka ti kaze ki se ti nahajas relativno od tote zeljene postaje

    - potli naredi se, ka preveris ce je lokacija prevec vun iz maribora


- dokoncati simulacijo avtobusov
    - pogledni si ovo, kej je chatgpt recommenda pa naredi step by step
    - te pa naredi neki seznam vseh linij, toti seznami majo lehko tudi vec seznamov notri
    - naredi, da se asinhrono toti seznam vedno posodabla. naredi mutexe al kej pac GO ma
      in te pa anredi funkcijo, ki ob api callu dostopa do totega seznam3a, tudi z mutexi in vun vzame trenutno lokacijo


- api endpoints za blaza
    - idk samo inserti pa selecti pa to

- ce bo cas, delej frontend za login pa to






todo danes:
- dodatna dokumentacija s swagger (to nejbol vecer, spodnji dve funkciji sta ti pomembnejši)

- narediti za nejhitrejsa pot do cilja od trenutne lokacije
    - nejprej pridobis 3 nejbljizje postaje zeljene lokacije
    - poglednes, keri directioni vozijo do teh postaj (vzemi direction)
    - poglednes, kere 3 postaje s totimi routi so nejbljizje uporabnikovi lokaciji
    - preveris case odhoda za tote specificne route na totih postajah
    - te pa vse matche izpises
    - lehko te potli tudi naredis na frontend, ka ti kaze ki se ti nahajas relativno od tote zeljene postaje

    - potli naredi se, ka preveris ce je lokacija prevec vun iz maribora

za frontend:
    - registracija
    - login
    - to vse za map



swag init -g ./api/main.go -d cmd,internal && swag fmt

swag init -g ./main.go -d cmd/api,internal/data && swag fmt

- intervali prihodnih časov


- update user fetch function
- po moznosti se dodej time v delays table
- allow for time 


- UNIT TESTING CI/CD (pogledni ovi guide do konca v glavnem)
- za handlerje:
    - optimalna pot
    - simulacija (nejprej vzemi direction pa preveri za vse avtobuse datum pa trenutni cas, ce ki spadajo. te poisci nejblizjo postajo glede na trenuten cas, te pa od tam naprej interpolirej)
    - naredi broadcast za web sockets. nejbojse je, ka asinhrono kalkuliras vse trenutne avtobuse pa samo posilas lokacije, ki jih uporabniki zelijo
    - pri depploymenti naredi safety malo bol. pa se enviorment variables. pa ci/cd, ko se pushne na main. ce bo vredi na main, te se pushne na prod, s tam pa de se dol potegnilo na server z webhookom pa de se ova skripta zagnala
    - ko je user logged in, se more vrniti celi user objekt vkljucno z id-jom

    - landing page more biti bol avtobus-like
    - settings menu implementacija
    - search function za maribor lokacije na zemljevidi, ka de uporabnik lehko poiska kam ce iti
    - porihtati se more tisti line_id pa to

    
    - jiro nafilati s pravimi descriptioni pa tickte nazej se delati zej na konci. en zadnji sprint
    - narediti github wiki dokumentaicjo. to se fejst hitro naredi za celi projekt. 
    - predstavitev za projekt. maybe dejansko malo povaditi totokrat

- na konci porihtej dokumentacijo da bo tak, kak se spodobi
- dodej pravi logger
- ce bo cas, naredi redis chachings