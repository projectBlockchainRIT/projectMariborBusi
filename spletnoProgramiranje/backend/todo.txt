handler za postaje:
- pridobi seznam vseh postaj za buttone (ime, številka, id)  "/stations/list" ✅
- pridobi podatke o lokaciji postaje (latitude, longitude) "/stations/location/stationId" ✅
- pridobi podatke za specifično postajo (ime, številka, linije, odhodni časi) "/stations/stationId" ✅
- get postaje within specific location "/stations/closeBy/location" (to z implementacijo geoprostorskih poizvedbe) ✅


handler za linije:
- pridobi pot specifične linije glede na id linije "/routes/lineId" ✅
- pridobi pot linije in vse postaje, ki so na poti tote linije "/routes/stations/lineId" ✅
- pridobi vse linije (id, koda linije) "/routes/list" ✅
- simulacija avtobusov na trenutni poti "/routes/simulate/lineId" (to z implementacijo web sockets)


handler za uporabnike:
- ustvari uporabnika
- pridobi uporabnika po id-ju
- avtentikacija in avtorizacija (to z implementacijo JWT)



če de čas, spremeni departures table tak, ka de seznam departerov, ne pa vsak departure posebej
naredi, ka vzemes lokacijo, ti poisce nejbljizjo postajo, ki te vodi do tja, kam ces iti
simulacija avtobusov na trenutni poti "/routes/simulate/lineId" (to z implementacijo web sockets)



- narediti za nejhitrejsa pot do cilja od trenutne lokacije
    - nejprej pridobis 3 nejbljizje postaje zeljene lokacije
    - poglednes, keri directioni vozijo do teh postaj (vzemi direction)
    - poglednes, kere 3 postaje s totimi routi so nejbljizje uporabnikovi lokaciji
    - preveris case odhoda za tote specificne route na totih postajah
    - te pa vse matche izpises
    - lehko te potli tudi naredis na frontend, ka ti kaze ki se ti nahajas relativno od tote zeljene postaje

    - potli naredi se, ka preveris ce je lokacija prevec vun iz maribora



- api endpoints za blaza
    - idk samo inserti pa selecti pa to







- narediti za nejhitrejsa pot do cilja od trenutne lokacije
    - nejprej pridobis 3 nejbljizje postaje zeljene lokacije
    - poglednes, keri directioni vozijo do teh postaj (vzemi direction)
    - poglednes, kere 3 postaje s totimi routi so nejbljizje uporabnikovi lokaciji
    - preveris case odhoda za tote specificne route na totih postajah
    - te pa vse matche izpises
    - lehko te potli tudi naredis na frontend, ka ti kaze ki se ti nahajas relativno od tote zeljene postaje

    - potli naredi se, ka preveris ce je lokacija prevec vun iz maribora




swag init -g ./api/main.go -d cmd,internal && swag fmt

- intervali prihodnih časov

//SANITAZE THE DATA IN THE GET AND POST REQUESTS !!!! ZA SQL INJECTION

delays:
we can easily obtain delays for that station based on the station selection
we can easily obtain the... say 8 most recent delays based on the line selection
we can easily obtain all of the user's delays
we can easily obtain only the most recent of the overall delays
we can easily obtain the number of lines with their delays
we can easily obtain the average number of minutes of delays for a specific line
we can easily obtain the overall average of delays for all lines

occupancy:
we can easily obtain the occupancy of a line throughout the day for a specific date
we can easily obtain the occupancy of a line for a specific date for a specific hour
we can easily obtain the average occupancy of all lines for a specific hour
we can easily obtain the average daily occupancy of all lines for a specific date


- update user fetch function
- po moznosti se dodej time v delays table
- allow for time 
